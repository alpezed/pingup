/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as MessagesRouteImport } from './routes/messages'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DiscoverRouteImport } from './routes/discover'
import { Route as CreatePostRouteImport } from './routes/create-post'
import { Route as ConnectionsRouteImport } from './routes/connections'
import { Route as IndexRouteImport } from './routes/index'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const MessagesRoute = MessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoverRoute = DiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => rootRouteImport,
} as any)
const CreatePostRoute = CreatePostRouteImport.update({
  id: '/create-post',
  path: '/create-post',
  getParentRoute: () => rootRouteImport,
} as any)
const ConnectionsRoute = ConnectionsRouteImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/connections': typeof ConnectionsRoute
  '/create-post': typeof CreatePostRoute
  '/discover': typeof DiscoverRoute
  '/login': typeof LoginRoute
  '/messages': typeof MessagesRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/connections': typeof ConnectionsRoute
  '/create-post': typeof CreatePostRoute
  '/discover': typeof DiscoverRoute
  '/login': typeof LoginRoute
  '/messages': typeof MessagesRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/connections': typeof ConnectionsRoute
  '/create-post': typeof CreatePostRoute
  '/discover': typeof DiscoverRoute
  '/login': typeof LoginRoute
  '/messages': typeof MessagesRoute
  '/profile': typeof ProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/connections'
    | '/create-post'
    | '/discover'
    | '/login'
    | '/messages'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/connections'
    | '/create-post'
    | '/discover'
    | '/login'
    | '/messages'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/connections'
    | '/create-post'
    | '/discover'
    | '/login'
    | '/messages'
    | '/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConnectionsRoute: typeof ConnectionsRoute
  CreatePostRoute: typeof CreatePostRoute
  DiscoverRoute: typeof DiscoverRoute
  LoginRoute: typeof LoginRoute
  MessagesRoute: typeof MessagesRoute
  ProfileRoute: typeof ProfileRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/messages': {
      id: '/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discover': {
      id: '/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof DiscoverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create-post': {
      id: '/create-post'
      path: '/create-post'
      fullPath: '/create-post'
      preLoaderRoute: typeof CreatePostRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/connections': {
      id: '/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConnectionsRoute: ConnectionsRoute,
  CreatePostRoute: CreatePostRoute,
  DiscoverRoute: DiscoverRoute,
  LoginRoute: LoginRoute,
  MessagesRoute: MessagesRoute,
  ProfileRoute: ProfileRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
