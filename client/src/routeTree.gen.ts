/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as PathlessLayoutRouteRouteImport } from './routes/_pathlessLayout/route'
import { Route as PathlessLayoutIndexRouteImport } from './routes/_pathlessLayout/index'
import { Route as PathlessLayoutProfileRouteImport } from './routes/_pathlessLayout/profile'
import { Route as PathlessLayoutMessagesRouteImport } from './routes/_pathlessLayout/messages'
import { Route as PathlessLayoutDiscoverRouteImport } from './routes/_pathlessLayout/discover'
import { Route as PathlessLayoutCreatePostRouteImport } from './routes/_pathlessLayout/create-post'
import { Route as PathlessLayoutConnectionsRouteImport } from './routes/_pathlessLayout/connections'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRouteRoute = PathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutIndexRoute = PathlessLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutProfileRoute = PathlessLayoutProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutMessagesRoute = PathlessLayoutMessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutDiscoverRoute = PathlessLayoutDiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutCreatePostRoute =
  PathlessLayoutCreatePostRouteImport.update({
    id: '/create-post',
    path: '/create-post',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)
const PathlessLayoutConnectionsRoute =
  PathlessLayoutConnectionsRouteImport.update({
    id: '/connections',
    path: '/connections',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/connections': typeof PathlessLayoutConnectionsRoute
  '/create-post': typeof PathlessLayoutCreatePostRoute
  '/discover': typeof PathlessLayoutDiscoverRoute
  '/messages': typeof PathlessLayoutMessagesRoute
  '/profile': typeof PathlessLayoutProfileRoute
  '/': typeof PathlessLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/connections': typeof PathlessLayoutConnectionsRoute
  '/create-post': typeof PathlessLayoutCreatePostRoute
  '/discover': typeof PathlessLayoutDiscoverRoute
  '/messages': typeof PathlessLayoutMessagesRoute
  '/profile': typeof PathlessLayoutProfileRoute
  '/': typeof PathlessLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_pathlessLayout/connections': typeof PathlessLayoutConnectionsRoute
  '/_pathlessLayout/create-post': typeof PathlessLayoutCreatePostRoute
  '/_pathlessLayout/discover': typeof PathlessLayoutDiscoverRoute
  '/_pathlessLayout/messages': typeof PathlessLayoutMessagesRoute
  '/_pathlessLayout/profile': typeof PathlessLayoutProfileRoute
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/connections'
    | '/create-post'
    | '/discover'
    | '/messages'
    | '/profile'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/connections'
    | '/create-post'
    | '/discover'
    | '/messages'
    | '/profile'
    | '/'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/login'
    | '/_pathlessLayout/connections'
    | '/_pathlessLayout/create-post'
    | '/_pathlessLayout/discover'
    | '/_pathlessLayout/messages'
    | '/_pathlessLayout/profile'
    | '/_pathlessLayout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PathlessLayoutIndexRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/profile': {
      id: '/_pathlessLayout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof PathlessLayoutProfileRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/messages': {
      id: '/_pathlessLayout/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof PathlessLayoutMessagesRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/discover': {
      id: '/_pathlessLayout/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof PathlessLayoutDiscoverRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/create-post': {
      id: '/_pathlessLayout/create-post'
      path: '/create-post'
      fullPath: '/create-post'
      preLoaderRoute: typeof PathlessLayoutCreatePostRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/connections': {
      id: '/_pathlessLayout/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof PathlessLayoutConnectionsRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
  }
}

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutConnectionsRoute: typeof PathlessLayoutConnectionsRoute
  PathlessLayoutCreatePostRoute: typeof PathlessLayoutCreatePostRoute
  PathlessLayoutDiscoverRoute: typeof PathlessLayoutDiscoverRoute
  PathlessLayoutMessagesRoute: typeof PathlessLayoutMessagesRoute
  PathlessLayoutProfileRoute: typeof PathlessLayoutProfileRoute
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutConnectionsRoute: PathlessLayoutConnectionsRoute,
  PathlessLayoutCreatePostRoute: PathlessLayoutCreatePostRoute,
  PathlessLayoutDiscoverRoute: PathlessLayoutDiscoverRoute,
  PathlessLayoutMessagesRoute: PathlessLayoutMessagesRoute,
  PathlessLayoutProfileRoute: PathlessLayoutProfileRoute,
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
